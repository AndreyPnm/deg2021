package com.wavesplatform.voting.contract.util

import java.math.BigInteger
import java.security.Security

import com.wavesplatform.voting.contract.validators.BlindSignatureVerifier
import com.wavesplatform.voting.contract.validators.BlindSignatureVerifier.BlindSigPublicKey
import org.bouncycastle.jce.provider.BouncyCastleProvider
import org.scalatest.freespec.AnyFreeSpec
import org.scalatest.matchers.should.Matchers

class RSABlindSignatureVerifierSpec extends AnyFreeSpec with Matchers {

  Security.addProvider(new BouncyCastleProvider)

  private val hashSize = 4096
  private val exp      = 65537
  private val modulo =
    "608200000672351353125050092130967752166706690358448846249781925697712353148616319184762487087476541069715820792309008027001903437199603930657056335368113223647279565123902168812274533788687270985841916462444646093452411729921674605406917455306743816596910137846386081743840030384626045747290622773544122836763421000272474730877290214244874471049352234535459779364451120351469281403370463975329543852156279945652381816914294588920599079570872953590912751221849557995893443727588806066336685615197480649544805881071503813365992550849813429416968958834227032454779564625772555698333758855020740986193631682636328115026683843433654741192990685746885424387127189483985874947211303079534731448859909433434146761192849412793131194342611721618996904601950024897188774344874410665746285662958108280671308711509327950580540210453537288124663193476070542548538190207032382485768236493730075710444537862976878748676333987617928700022037572909846620615786242960856003299278571111475540591494108105369790199048048648953198927109291486794641015123094636505681609796399493810850306690430814937352396614899790393139720159510800918044237909459001797695675742709681643611367106510408477891496343462275494392102233989653527029549036484861100662517540221"

  private val testData =
    List(
      (
        "Hello world",
        "434233585108790418668730006555954232951554643039812919020978918651405550200776429315084733635171739500812157548435277710092866698336554195408330153297336534677181346955944266700520918215343100765896066662533040736616648989914939893622014505503958468995577020183723979589817732126568621048440554094588298628956335884467454436926698635093966882494465532482464667469057919217401946393221100223707170204184982800248044867202999651519132846990291690356829846581963089656581178126477956729635273397701312198177604916652714714026958404667964245470477665359343041051298149538674356253447261172688319667512500115406975411584027211108764370652817350715681846117168026579791682305124288946628742175969777293611406110491152866161667900690267671149181150835997524029925737875002343147904800408573706378050659872146166439025592020013341371258385321945431345870521876239900957211673019578142025813244971983420008460931535302132367176379959429839675162248892385230582059914375135213461359982222575533098418131013328054568942777491740143278695232115055908259771213186957337817482519969012068883163747230782585175901426307053836304278290012789743678890243144712942636688409236927916114216151998544751187348474638629300675214335946811551877915376344005"
      ),
      (
        "Тестовое сообщение",
        "297906487315434787659853743329976301747140088061147903385415748518884317240880187773142994719387075800293368949784077313894737590867614998040192180199500462617469155951182232860228600245991752911615786346736500918088003521463678964587363598158848158160528766149769370590227320270130674000076379501846140772866486685414825933613473498838610935599333309836771814521785751513869210218845238785781486597402067133877699295488066366604267647320304421768132385985927335099941484030721545455514037306254183612241308890487725116559412705985780671614413191611072341663835119462738790519920357793344304718781719096627599150727502793326797576595154202619222957847266643060947485018630999960143213689806296136584106380919528292200664349744519570290377135514577867264623179239657110152009320747330238571877565611714505828145093844321326258562411214373206745250880869503608817490089273591039545504887346582687407086628098014819614261271324875165567238686350576956988302798941143747162727252392598290133037284230247794731363481866905883074752209360292881814811558602416531518494335971352528322393795144464781328942309083474017054063310369221542652343313716541577725813885975978351306278743501952533618514885732063656497937399956899020119648093929002"
      ),
      (
        "",
        "380558057275232554937137092442998408421924567082605132190117019464179763524028088715449156711369446759300829204289908930830326113985001031988625362732578123701226322302336759201963472562764657911119393877108995742907987373744160237202755035203418559792936343200716984653843466009297412700042527207666960437719018201639791692926470827830055583548251479483762248323573949236089291045297786623288007728375088159869959074301664785441617046885517060904109093334386559012888663488449845633791875654786910252762080484431275283400599153944908970170929200112415598823865392915071173355916197392259750734899978198507570979455050541772226496613717957069978581567724519367995576588300132320069125119679644145923608018346785900804312646970925507318031233253140263138172482698978944307702815179049031594537625834318773929042715312786648300018237938189507366225143163954108937635481880492553113904889293302044923830993137773314376350845672340208487028021592937623788959104896838114325327356985637832744687505245371813332948118340097104098320258127538249523838996324254658203171560095989147251966642931673216210513778847467856162224365348211119823125040805196791608451817504676651579395542071344286447312804399093410865728747768560864045280279037767"
      )
    )

  "test blind signature verification" in {
    testData.foreach {
      case (message, signature) =>
        val publicKey = BlindSigPublicKey(new BigInteger(modulo), BigInteger.valueOf(exp))
        val verified  = BlindSignatureVerifier.verify(new BigInteger(signature), publicKey, message, hashSize)
        verified shouldEqual true
    }
  }
}
